        - You make a lot of unsubstantiated "you should"s. It's ok to have an opinion, but many of them were unjustified.
            In many cases there was no illustration or explanation of the 'why', just the 'what'.

PARTIAL - There are a lot of big conceptual leaps. I kept getting the feeling you knew too much and that you assumed a lot about what the reader knows.
            As an example, you start of by talking about abstraction (good) but then go right to an example of a bad one. I don't think it logically follows.
            I would start with a very simple and good abstraction, slowly build on it, and once you reach a point (like describing an action endpoint) where
            someone might think "I'll do it this way that seems obvious!" is when you educate them on why that's not the best course.

        - I'm personally not a fan of reducing APIs to CRUD or database queries. That feels like you're exposing an implementation detail you advocated for abstracting away.
            Also, from my experience of working with APIs, well-designed APIs do not map nicely to database tables, even when you design them from scratch.
            I also think it detracts from helping people think about representing states of resources instead of building an HTTP interface to their DB.

FIXED   - We debated internally what to call an HTTP request/response pair. The spec uses 'message'.
            I would avoid 'packet' since that's a TCP term and a different thing. http://pretty-rfc.herokuapp.com/RFC2616#httpmessage

FIXED   - PUT can be used for idempotent creates, including with the ID (it's awesome for retry-creates). Idempotency doesn't get a mention until page 23. It's a pretty important topic.

???     - .json or .xml in the URL for selecting a format does not create new resources. It returns different representations of a resource (e.g. an instance of a class).

FIXED   - The first line in a response is not a header, it's the status line: http://pretty-rfc.herokuapp.com/RFC2616#status-line Same for the request line.
            Different semantics than the headers.

FIXED   - I would suggest using an existing format for your URL template examples: http://tools.ietf.org/html/rfc6570  

FIXED   - I would more strongly emphasize that you don't want to use the same domain for your API as your web site because of the cookie thing.
            You should also not listen on port 80, to avoid credentials leaking if you forget to use HTTPS

???     - The root URL is a good place to return info about the current user to validate they are auth'd correctly

FIXED   - 3.3.0.2 incorrectly returns the results in an array

OK      - 4.2.1.2 key passing is a fine option for auth. In transit it's no more or less secure than HTTP basic and it's easier to link to things.
            If you have a read-only API that might be more important.

FIXED   - OAuth2 doesn't mention scopes for permissions

READ    - READ: More API design thoughts: http://john-sheehan.com/blog/dont-build-the-best-rest-api-build-the-best-http-api 
